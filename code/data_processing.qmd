---
title: "Data processing"
author: "Xiaojing Ni"
format:
    html:
        embed-resources: true
        theme: default
        code-copy: true
        code-fold: true
        code-line-numbers: true
        toc: true
        toc-depth: 4
        link-external-icon: true
        link-external-newwindow: true
---

# Plot data
## Daily average consumption by household
1. Read data
```{r}
## read data

## plug 04 household
## Measurement period:
## 27.06.12 to 23.01.13

## 01: Fridge (no. days: 194, coverage: 97.01%)
## 02: Kitchen appliances (no. days: 194, coverage: 96.81%) (*)
## 03: Lamp (no. days: 170, coverage: 93.54%) (**)
## 04: Stereo and laptop (no. days: 169, coverage: 90.98%)
## 05: Freezer (no. days: 192, coverage: 93.08%)
## 06: Tablet (no. days: 189, coverage: 93.6%)
## 07: Entertainment (no. days: 186, coverage: 94.69%) (***)
## 08: Microwave (no. days: 194, coverage: 97.08%)

appliance <- c("01", "02", "03", "04", "05", "06", "07", "08")
for (a in appliance) {
  file_list <-
    list.files(
      path = paste0("../../eco/04_plug/", a),
      pattern = ".csv",
      all.files = FALSE,
      full.names = FALSE
    )
  
  ## initiate variable name for each applicance
  df_name <- paste0("p04_", a)
  
  for (file in file_list) {
    path <- paste0("../../eco/04_plug/", a, "/", file)
    
    # if the merged dataset doesn't exist, create it
    if (!exists(df_name)) {
      temp <- read.table(path, header = FALSE)
      colnames(temp) <- substr(file, 1, 10)
      assign(df_name, temp)
      rm(temp)
    }
    
    # if the merged dataset does exist, append to it
    if (exists(df_name)) {
      temp_dataset <- read.table(path, header = FALSE)
      colnames(temp_dataset) <- substr(file, 1, 10)
      temp <- cbind(get(df_name), temp_dataset)
      assign(df_name, temp)
      rm(temp_dataset, temp)
    }
  }
}

## read data

## plug 05 household
# Measurement period:
# 27.06.12 to 31.01.13
#
# 01: Tablet (no. days: 218, coverage: 97.87%)
# 02: Coffee machine (no. days: 218, coverage: 95.16%)
# 03: Fountain (no. days: 71, coverage: 99.43%) (*)
# 04: Microwave (no. days: 218, coverage: 97.87%)
# 05: Fridge (no. days: 218, coverage: 97.87%)
# 06: Entertainment (no. days: 192, coverage: 89.14%) (**)
# 07: PC (no. days: 218, coverage: 97.87%) (***)
# 08: Kettle (no. days: 25, coverage: 76.64%)

appliance <- c("01", "02", "03", "04", "05", "06", "07", "08")
for (a in appliance) {
  file_list <-
    list.files(
      path = paste0("../../eco/05_plug/", a),
      pattern = ".csv",
      all.files = FALSE,
      full.names = FALSE
    )
  
  ## initiate variable name for each applicance
  df_name <- paste0("p05_", a)
  
  for (file in file_list) {
    path <- paste0("../../eco/05_plug/", a, "/", file)
    
    # if the merged dataset doesn't exist, create it
    if (!exists(df_name)) {
      temp <- read.table(path, header = FALSE)
      colnames(temp) <- substr(file, 1, 10)
      assign(df_name, temp)
      rm(temp)
    }
    
    # if the merged dataset does exist, append to it
    if (exists(df_name)) {
      temp_dataset <- read.table(path, header = FALSE)
      colnames(temp_dataset) <- substr(file, 1, 10)
      temp <- cbind(get(df_name), temp_dataset)
      assign(df_name, temp)
      rm(temp_dataset, temp)
    }
  }
}

## read data

## plug 06 household
# PLUG DATA
# ---------
#
# Measurement period:
# 27.06.12 to 31.01.13
#
# 01: Lamp (no. days: 166, coverage: 67.2%)
# 02: Laptop (no. days: 185, coverage: 97.3%) (*)
# 03: Router (no. days: 88, coverage: 96.73%) (**)
# 04: Coffee machine (no. days: 179, coverage: 86.03%)
# 05: Entertainment (no. days: 181, coverage: 95.86%) (***)
# 06: Fridge (no. days: 179, coverage: 95.78%)
# 07: Kettle (no. days: 147, coverage: 82.54%)

appliance <- c("01", "02", "03", "04", "05", "06", "07")
for (a in appliance) {
  file_list <-
    list.files(
      path = paste0("../../eco/06_plug/", a),
      pattern = ".csv",
      all.files = FALSE,
      full.names = FALSE
    )
  
  ## initiate variable name for each applicance
  df_name <- paste0("p06_", a)
  
  for (file in file_list) {
    path <- paste0("../../eco/06_plug/", a, "/", file)
    
    # if the merged dataset doesn't exist, create it
    if (!exists(df_name)) {
      temp <- read.table(path, header = FALSE)
      colnames(temp) <- substr(file, 1, 10)
      assign(df_name, temp)
      rm(temp)
    }
    
    # if the merged dataset does exist, append to it
    if (exists(df_name)) {
      temp_dataset <- read.table(path, header = FALSE)
      colnames(temp_dataset) <- substr(file, 1, 10)
      temp <- cbind(get(df_name), temp_dataset)
      assign(df_name, temp)
      rm(temp_dataset, temp)
    }
  }
}
```

2. Compute daily consumption by each household and each appliance.
```{r}
## create daily consumption df
daily_power <- data.frame(c("household","daily_avg","appliance","hour","hour_avg"))
households <- c("04","05","06")
appliance <- c("01","02","03","04","05","06","07","08")

# compute hourly consumption
for (household in households){
  df <- get(paste0("p",household))
  colMeans(matrix(data$Value, nrow=20))
}
```

# Smart meter data

The concept of three-phase smart meter is explained [here](https://www.sms-plc.com/insights/what-does-the-3-phase-smart-meter-mean-for-the-smart-energy-revolution/). We are going to look at the total and each phase power. 

```{r}
## read data

## plug 04 household
# SMART METER DATA
# ----------------
#
# Measurement period:
# 27.06.12 to 31.01.13
#
# Coverage:
# No. days: 219, Coverage: 99.39%


file_list <-
  list.files(
    path = paste0("../../eco/04_sm"),
    pattern = ".csv",
    all.files = FALSE,
    full.names = FALSE
  )



for (file in file_list) {
  path <- paste0("../../eco/04_sm/", file)
  
  for (phase in 0:3) {
    # if the merged dataset doesn't exist, create it
    
    ## initiate variable name for each phase
    df_phase <- paste0("s04_", phase)
    
    if (!exists(df_phase)) {
      temp <- read.csv(path, header = FALSE)
      temp <- data.frame(temp[, phase + 1])
      colnames(temp) <- substr(file, 1, 10)
      assign(df_phase, temp)
      rm(temp)
    }
    
    # if the merged dataset does exist, append to it
    if (exists(df_phase)) {
      temp_dataset <- read.csv(path, header = FALSE)
      temp_dataset <- data.frame(temp_dataset[, phase + 1])
      colnames(temp_dataset) <- substr(file, 1, 10)
      temp <- cbind(get(df_phase), temp_dataset)
      assign(df_phase, temp)
      rm(temp_dataset, temp)
    }
  }
}

```

Reading the data cost several minutes. This indicate that the data need to be aggregate or processed in some way. 

Plot 2012-06-27 for all phases. 
```{r}

par(mar=c(2.5,2.5,1,1))

layout(matrix(c(1,2,3,4,5),ncol=1),heights=c(2,2,2,2,2))

plot.new()
text(0.5,0.5,"04 Smart meter power on 2012-06-27")
plot(s04_0$`2012-06-27`, type = "l", main = "All phase", col ="red")
plot(s04_1$`2012-06-27`, type = "l", main = "Phase 1",col ="blue")
plot(s04_2$`2012-06-27`, type = "l", main = "Phase 2",col ="green")
plot(s04_3$`2012-06-27`, type = "l", main = "Phase 3",col ="black")
```
Compare for a different household.

```{r}
## read data

## plug 05 household

# SMART METER DATA
# ----------------
# 
# Measurement period:
# 27.06.12 to 31.01.13
# 
# Coverage:
# No. days: 215, Coverage: 99.05%


file_list <-
  list.files(
    path = paste0("../../eco/05_sm"),
    pattern = ".csv",
    all.files = FALSE,
    full.names = FALSE
  )



for (file in file_list) {
  path <- paste0("../../eco/05_sm/", file)
  
  for (phase in 0:3) {
    # if the merged dataset doesn't exist, create it
    
    ## initiate variable name for each phase
    df_phase <- paste0("s05_", phase)
    
    if (!exists(df_phase)) {
      temp <- read.csv(path, header = FALSE)
      temp <- data.frame(temp[, phase + 1])
      colnames(temp) <- substr(file, 1, 10)
      assign(df_phase, temp)
      rm(temp)
    }
    
    # if the merged dataset does exist, append to it
    if (exists(df_phase)) {
      temp_dataset <- read.csv(path, header = FALSE)
      temp_dataset <- data.frame(temp_dataset[, phase + 1])
      colnames(temp_dataset) <- substr(file, 1, 10)
      temp <- cbind(get(df_phase), temp_dataset)
      assign(df_phase, temp)
      rm(temp_dataset, temp)
    }
  }
}

```